       New Order (TRADE)
                Response ACK:

        {
            "symbol": "BTCUSDT",
                "orderId": 28,
                "orderListId": -1, //Unless OCO, value will be -1
                "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
                "transactTime": 1507725176595
        }
        Response RESULT:

        {
            "symbol": "BTCUSDT",
                "orderId": 28,
                "orderListId": -1, //Unless OCO, value will be -1
                "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
                "transactTime": 1507725176595,
                "price": "0.00000000",
                "origQty": "10.00000000",
                "executedQty": "10.00000000",
                "cummulativeQuoteQty": "10.00000000",
                "status": "FILLED",
                "timeInForce": "GTC",
                "type": "MARKET",
                "side": "SELL",
                "strategyId": 1,               // This is only visible if the field was populated on order placement.
                "strategyType": 1000000        // This is only visible if the field was populated on order placement.
        }
        Response FULL:

        {
            "symbol": "BTCUSDT",
                "orderId": 28,
                "orderListId": -1, //Unless OCO, value will be -1
                "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
                "transactTime": 1507725176595,
                "price": "0.00000000",
                "origQty": "10.00000000",
                "executedQty": "10.00000000",
                "cummulativeQuoteQty": "10.00000000",
                "status": "FILLED",
                "timeInForce": "GTC",
                "type": "MARKET",
                "side": "SELL",
                "strategyId": 1,               // This is only visible if the field was populated on order placement.
                "strategyType": 1000000        // This is only visible if the field was populated on order placement.
            "fills": [
            {
                "price": "4000.00000000",
                    "qty": "1.00000000",
                    "commission": "4.00000000",
                    "commissionAsset": "USDT",
                    "tradeId": 56
            },
            {
                "price": "3999.00000000",
                    "qty": "5.00000000",
                    "commission": "19.99500000",
                    "commissionAsset": "USDT",
                    "tradeId": 57
            },
            {
                "price": "3998.00000000",
                    "qty": "2.00000000",
                    "commission": "7.99600000",
                    "commissionAsset": "USDT",
                    "tradeId": 58
            },
            {
                "price": "3997.00000000",
                    "qty": "1.00000000",
                    "commission": "3.99700000",
                    "commissionAsset": "USDT",
                    "tradeId": 59
            },
            {
                "price": "3995.00000000",
                    "qty": "1.00000000",
                    "commission": "3.99500000",
                    "commissionAsset": "USDT",
                    "tradeId": 60
            }
  ]
        }
        POST /api/v3/order (HMAC SHA256)

        Send in a new order.

                Weight(UID): 1 Weight(IP): 1

        Parameters:

        Name	Type	Mandatory	Description
        symbol	STRING	YES
        side	ENUM	YES
        type	ENUM	YES
        timeInForce	ENUM	NO
        quantity	DECIMAL	NO
        quoteOrderQty	DECIMAL	NO
        price	DECIMAL	NO
        newClientOrderId	STRING	NO	A unique id among open orders. Automatically generated if not sent.
        strategyId	INT	NO
        strategyType	INT	NO	The value cannot be less than 1000000.
        stopPrice	DECIMAL	NO	Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
        trailingDelta	LONG	NO	Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. For more details on SPOT implementation on trailing stops, please refer to Trailing Stop FAQ
        icebergQty	DECIMAL	NO	Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
        newOrderRespType	ENUM	NO	Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK.
        recvWindow	LONG	NO	The value cannot be greater than 60000
        timestamp	LONG	YES
        Additional mandatory parameters based on type:

        Type	Additional mandatory parameters
        LIMIT	timeInForce, quantity, price
        MARKET	quantity or quoteOrderQty
        STOP_LOSS	quantity, stopPrice or trailingDelta
        STOP_LOSS_LIMIT	timeInForce, quantity, price, stopPrice or trailingDelta
        TAKE_PROFIT	quantity, stopPrice or trailingDelta
        TAKE_PROFIT_LIMIT	timeInForce, quantity, price, stopPrice or trailingDelta
        LIMIT_MAKER	quantity, price
        Other info:

        LIMIT_MAKER are LIMIT orders that will be rejected if they would immediately match and trade as a taker.
                STOP_LOSS and TAKE_PROFIT will execute a MARKET order when the stopPrice is reached.
        Any LIMIT or LIMIT_MAKER type order can be made an iceberg order by sending an icebergQty.
        Any order with an icebergQty MUST have timeInForce set to GTC.
                MARKET orders using the quantity field specifies the amount of the base asset the user wants to buy or sell at the market price.
                For example, sending a MARKET order on BTCUSDT will specify how much BTC the user is buying or selling.
        MARKET orders using quoteOrderQty specifies the amount the user wants to spend (when buying) or receive (when selling) the quote asset; the correct quantity will be determined based on the market liquidity and quoteOrderQty.
                Using BTCUSDT as an example:
        On the BUY side, the order will buy as many BTC as quoteOrderQty USDT can.
        On the SELL side, the order will sell as much BTC needed to receive quoteOrderQty USDT.
                MARKET orders using quoteOrderQty will not break LOT_SIZE filter rules; the order will execute a quantity that will have the notional value as close as possible to quoteOrderQty.
        same newClientOrderId can be accepted only when the previous one is filled, otherwise the order will be rejected.
                For STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT_LIMIT and TAKE_PROFIT orders, trailingDelta can be combined with stopPrice.
                Trigger order price rules against market price for both MARKET and LIMIT versions:

        Price above market price: STOP_LOSS BUY, TAKE_PROFIT SELL
        Price below market price: STOP_LOSS SELL, TAKE_PROFIT BUY*/
